#include<bits/stdc++.h>
using namespace std;
int orangesRotting(vector<vector<int>>&grid){
    queue<pair<pair<int, int>, int>>q;
    vector<int>dr = {0, 1, 0, -1};
    vector<int>dc = {-1, 0, 1, 0};
    // first obtain all the rotten oranges at 0th minute
    for(int i=0; i<grid.size(); i++){
        for(int j=0; j<grid[i].size(); j++){
            if (grid[i][j] == 2){
                q.push({{i, j}, 0});
            }
        }
    }
    int time = 0; 
    while(!q.empty()){
        pair<pair<int, int>, int> node = q.front();
        q.pop();
        int min3 = node.second;
        time = min3;
        int r = node.first.first;
        int c = node.first.second;
        for(int i=0; i<4; i++){
            if(r+dr[i] >=0 && r+dr[i]<grid.size() && c+dc[i]>=0 && c+dc[i] < grid[0].size() && grid[r+dr[i]][c+dc[i]] == 1){
                grid[r+dr[i]][c+dc[i]] = 2;
                q.push({{r+dr[i], c+dc[i]}, min3+1});
            }
        }
    }
    // After this we need to check if the all the fresh oranges ahve rotten or not
    for(int i=0; i<grid.size(); i++){
        for(int j=0; j<grid[i].size(); j++){
            if(grid[i][j] == 1){
                return -1;
            }
        }
    }

    return time;

}
int main(){
    vector<vector<int>>grid = {{1}, {2}, {1}, {2}};
    cout<<orangesRotting(grid);
    return 0;
}
